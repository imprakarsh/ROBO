{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","haserror","error","info","this","setState","hasError","Component","App","onsearch","event","searchfield","target","value","fetch","then","response","json","users","length","filteredRobots","filter","robot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAkBeA,EAhBH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAKxB,OAEC,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,KAC/C,6BACC,gCAAMF,GACN,+BAAKC,MCSMK,EApBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAGhB,OACC,6BACAA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCENW,EAbE,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAClB,OACC,yBAAKV,UAAU,OACd,2BACCA,UAAU,mCAAsCW,KAAK,WACrDC,YAAY,gBACZC,SAAUH,MCICI,EAVD,SAACC,GAEd,OADAC,QAAQC,IAAIF,GAEX,yBAAKG,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAC/DN,EAAMO,WCgBKC,E,YAnBd,WAAYR,GAAO,IAAD,8BACjB,4CAAMA,KACDS,MAAM,CACVC,UAAS,GAHO,E,+EAOAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMM,SACN,yDAEDF,KAAKb,MAAMO,a,GAhBOS,aC8DZC,G,kBArDd,aAAc,IAAD,8BACZ,+CAiBDC,SAAS,SAACC,GACT,EAAKL,SAAS,CAACM,YAAYD,EAAME,OAAOC,QACxCrB,QAAQC,IAAIiB,EAAME,OAAOC,QAlBzB,EAAKb,MAAM,CACVpB,OAAQ,GACR+B,YAAY,IAEbnB,QAAQC,IAAI,KANA,E,iFASO,IAAD,OAClBqB,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKb,SAAS,CAACzB,OAAOsC,OACnC1B,QAAQC,IAAIW,KAAKJ,MAAMpB,U,+BAUhB,IAAD,EAEoBwB,KAAKJ,MAAzBpB,EAFA,EAEAA,OAAO+B,EAFP,EAEOA,YAGd,GADAnB,QAAQC,IAAI,KACO,IAAhBb,EAAOuC,OACT,OAAO,uCAGP,IAAMC,EAAexC,EAAOyC,QAAO,SAAAC,GAClC,OAAOA,EAAMjD,KAAKkD,cAAcC,SAASb,EAAYY,kBAGtD,OACC,yBAAK/C,UAAU,MACf,4CACA,kBAAC,EAAD,CAAWU,aAAckB,KAAKK,WAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU7B,OAAQwC,W,GA3CLb,cCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.e46342d1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card= ({name,email,id}) =>{\n\t//const {name,email,id}=props;\n//\tif(true){\n//\t\tthrow new Error('NOOO!');\n//\t}\n\treturn (\n\t\t\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}`}/>\n\t\t\t<div>\n\t\t\t\t<h2> {name}</h2>\n\t\t\t\t<p> {email}</p>\n\t\t\t</div>\n\t\t</div>\t\t\n\t);\n}\nexport default Card;\n","import React from 'react';\nimport Card from './Card'\nconst CardList=({robots})=>{\n\t\n\n\treturn (\n\t\t<div>{\n\t\trobots.map((user,i) =>{\n\t\treturn \t(\n\t\t\t<Card \n\t\t\t\tkey={i} \n\t\t\t\tid={robots[i].id} \n\t\t\t\tname={robots[i].name} \n\t\t\t\temail={robots[i].email}/>\n\t\t\t);\n\t\t})\n\t\n\t\t}\n\t\t</div> \n\t\t);\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox =({searchChange}) =>{\n\treturn(\n\t\t<div className='ma2'>\n\t\t\t<input \n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\t\t\t\ttype='seachBox' \n\t\t\t\tplaceholder='Search Robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div> \n\t);\n\n}\n\nexport default SearchBox;\n","import React from 'react'\n\nconst Scroll =(props)=>{\n\tconsole.log(props);\n\treturn(\n\t\t<div style={{overflowY:'scroll',border:'5px solid black', height:'550px'}}>\n\t\t\t{props.children}\n\t\t</div> \n\t)\n\n};\n\nexport default Scroll ;\n","import React,{ Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thaserror:false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({haserror:true});\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1> ooops. THat is not good </h1> \n\t\t}\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;\n","import React, {Component} from 'react' \n\nimport CardList from '../components/CardList.js'\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundary.js';\nimport './App.css' ;\n\n\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\trobots: [],\n\t\t\tsearchfield:''\n\t\t}\n\t\tconsole.log('1');\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response=>response.json())\n\t\t\t.then(users=>this.setState({robots:users}));\n\t\t\tconsole.log(this.state.robots);\n\t}\n\n\n\n\tonsearch=(event)=>{\n\t\tthis.setState({searchfield:event.target.value})\n\t\tconsole.log(event.target.value);\n\t}\n\n\trender(){\n\n\t\tconst {robots,searchfield}=this.state;\n\n\t\tconsole.log('3');\n\t\tif(robots.length===0){\n\t\t\treturn <h1>Loading</h1>\n\t\t}\n\t\telse{\n\t\t\tconst filteredRobots=robots.filter(robot =>{\n\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n\t})\n\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t<h1> Robofriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onsearch}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</ErrorBoundry> \n\t\t\t\t</Scroll>\n\t\t\t\t</div> \n\n\t\t\t);\n\t\t}\n\t}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n//import {robots} from './robot';\n\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n//ReactDOM.render(\n//\t<div>\n//\t\t<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//\t\t<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//\t\t<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n//\t\t<Card />\n//\t\t<Card />\n//\t\t<Card />\n//\t</div>\n//\t\n//\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}